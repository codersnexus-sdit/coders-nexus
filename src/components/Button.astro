---
export interface Props {
  href?: string;
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  class?: string;
  target?: string;
  rel?: string;
  type?: HTMLButtonElement['type']; // Use proper HTML button type
}

const {
  href,
  variant = 'primary',
  size = 'md',
  class: className = '',
  target,
  rel,
  type = 'button' // Default to 'button' for form buttons
} = Astro.props;

const baseClasses = 'inline-flex items-center justify-center font-semibold rounded-lg transition-all duration-200';

const variants = {
  primary: 'bg-primary-600 hover:bg-primary-700 text-white shadow-md hover:shadow-lg',
  secondary: 'bg-accent-600 hover:bg-accent-700 text-white shadow-md hover:shadow-lg',
  outline: 'border-2 border-primary-600 text-primary-600 hover:bg-primary-50 dark:hover:bg-primary-900/20',
  ghost: 'text-primary-600 hover:bg-primary-50 dark:hover:bg-primary-900/20',
};

const sizes = {
  sm: 'px-4 py-2 text-sm',
  md: 'px-6 py-3 text-base',
  lg: 'px-8 py-4 text-lg',
};

const classes = `${baseClasses} ${variants[variant]} ${sizes[size]} ${className}`;
---

{href ? (
  <a href={href} class={classes} target={target} rel={rel}>
    <slot />
  </a>
) : (
  <button type={type} class={classes}>
    <slot />
  </button>
)}