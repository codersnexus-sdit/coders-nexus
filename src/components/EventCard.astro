---
// EventCard component for displaying event information
interface EventCardProps {
  // Option 1: Receive individual props
  title?: string;
  description?: string;
  date?: Date;
  location?: string;
  coverImage?: string;
  slug?: string;
  tags?: string[];
  featured?: boolean;
  // Option 2: Receive event object
  event?: {
    slug: string;
    data: {
      title: string;
      description: string;
      date: Date;
      location: string;
      coverImage: string;
      tags?: string[];
      featured?: boolean;
    };
  };
}

// Extract and type the props
const props = Astro.props as EventCardProps;

// Handle both ways of passing data
const { 
  title, 
  description, 
  date, 
  location, 
  coverImage, 
  slug, 
  tags = [], 
  featured = false,
  event
} = props;

// If event object is provided, extract data from it
const finalTitle = title || event?.data?.title || '';
const finalDescription = description || event?.data?.description || '';
const finalDate = date || event?.data?.date;
const finalLocation = location || event?.data?.location || '';
const finalCoverImage = coverImage || event?.data?.coverImage || '';
const finalSlug = slug || event?.slug || '';
const finalTags = tags.length > 0 ? tags : (event?.data?.tags || []);
const finalFeatured = featured || event?.data?.featured || false;

// Format the date for display, with fallback for undefined dates
const formattedDate = finalDate ? finalDate.toLocaleDateString('en-US', { 
  year: 'numeric', 
  month: 'short', 
  day: 'numeric' 
}) : 'TBA';
---

<!-- Event Card Link -->
<a href={`/events/${finalSlug}`} class="group block bg-white dark:bg-gray-800 rounded-2xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
  <!-- Event Image Container -->
  <div class="relative h-48 overflow-hidden">
    <img 
      src={finalCoverImage} 
      alt={finalTitle}
      class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
      loading="lazy"
    />
    
    <!-- Tags -->
    {finalTags.length > 0 && (
      <div class="absolute bottom-4 left-4 flex flex-wrap gap-2">
        {finalTags.slice(0, 2).map((tag: string) => (
          <span class="bg-white/80 dark:bg-gray-900/80 text-gray-800 dark:text-gray-200 text-xs font-medium px-2 py-1 rounded">
            {tag}
          </span>
        ))}
      </div>
    )}
  </div>
  
  <!-- Event Content -->
  <div class="p-6">
    <!-- Event Title -->
    <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-3 text-center group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors">
      {finalTitle}
    </h3>
    
    <!-- Event Date -->
    <div class="flex items-center justify-center text-sm text-gray-500 dark:text-gray-400 mb-2">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
      </svg>
      <span>{formattedDate}</span>
    </div>
    
    <!-- Event Location -->
    <div class="flex items-center justify-center text-sm text-gray-500 dark:text-gray-400">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
      </svg>
      <span>{finalLocation}</span>
    </div>
  </div>
</a>